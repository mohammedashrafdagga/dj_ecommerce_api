openapi: 3.0.3
info:
  title: ' E-commerce API '
  version: 1.0.0
  description: Building (Onside) ecommerce api using Django and Django Rest Framework
paths:
  /api/accounts/change-password/:
    post:
      operationId: api_accounts_change_password_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/accounts/detail/:
    get:
      operationId: api_accounts_detail_retrieve
      description: allow to User to see a lot of detail
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
  /api/accounts/edit/:
    put:
      operationId: api_accounts_edit_update
      description: Update User Information
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateAccount'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccount'
          description: ''
    patch:
      operationId: api_accounts_edit_partial_update
      description: Update User Information
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUpdateAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateAccount'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccount'
          description: ''
  /api/accounts/login/:
    post:
      operationId: api_accounts_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/accounts/login/refresh/:
    post:
      operationId: api_accounts_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/accounts/register/:
    post:
      operationId: api_accounts_register_create
      description: Allow to user to create a new account
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAccount'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccount'
          description: ''
  /api/orders/:
    get:
      operationId: api_orders_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
  /api/orders/{id}/:
    get:
      operationId: api_orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/orders/create/:
    post:
      operationId: api_orders_create_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
          description: ''
  /api/products/:
    get:
      operationId: api_products_list
      parameters:
      - in: query
        name: brand__slug
        schema:
          type: string
      - in: query
        name: category__slug
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /api/products/brands/:
    get:
      operationId: api_products_brands_list
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand'
          description: ''
  /api/products/categories/:
    get:
      operationId: api_products_categories_list
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
components:
  schemas:
    Account:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 255
        phone:
          type: string
          nullable: true
          maxLength: 20
        dob:
          type: string
          format: date
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        address:
          type: string
          nullable: true
      required:
      - email
      - username
    Brand:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        content:
          type: string
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          readOnly: true
      required:
      - categories
      - name
    Category:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        content:
          type: string
          nullable: true
      required:
      - name
    CreateAccount:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
        confirm_password:
          type: string
          writeOnly: true
      required:
      - confirm_password
      - email
      - password
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        owner:
          type: integer
          readOnly: true
        order_date:
          type: string
          format: date-time
          readOnly: true
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        total_quantity:
          type: integer
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
      required:
      - id
      - items
      - order_date
      - owner
      - status
      - total_price
      - total_quantity
    OrderCreate:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            additionalProperties: {}
          writeOnly: true
      required:
      - items
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - id
      - product
    PatchedUpdateAccount:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        phone:
          type: string
          nullable: true
          maxLength: 20
        dob:
          type: string
          format: date
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        address:
          type: string
          nullable: true
    Product:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 255
        content:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        brand:
          allOf:
          - $ref: '#/components/schemas/Brand'
          readOnly: true
        main_image:
          type: string
          format: uri
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          readOnly: true
      required:
      - brand
      - category
      - content
      - images
      - name
      - price
    ProductImage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: string
          format: uri
      required:
      - id
    StatusEnum:
      enum:
      - Pending
      - Completed
      - Cancelled
      type: string
      description: |-
        * `Pending` - Pending
        * `Completed` - Completed
        * `Cancelled` - Cancelled
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UpdateAccount:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        phone:
          type: string
          nullable: true
          maxLength: 20
        dob:
          type: string
          format: date
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        address:
          type: string
          nullable: true
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
